// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	output "github.com/projectdiscovery/nuclei/v3/pkg/output"
	templates "github.com/projectdiscovery/nuclei/v3/pkg/templates"
)

// MockNucleiInterface is a mock of NucleiInterface interface.
type MockNucleiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNucleiInterfaceMockRecorder
}

// MockNucleiInterfaceMockRecorder is the mock recorder for MockNucleiInterface.
type MockNucleiInterfaceMockRecorder struct {
	mock *MockNucleiInterface
}

// NewMockNucleiInterface creates a new mock instance.
func NewMockNucleiInterface(ctrl *gomock.Controller) *MockNucleiInterface {
	mock := &MockNucleiInterface{ctrl: ctrl}
	mock.recorder = &MockNucleiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNucleiInterface) EXPECT() *MockNucleiInterfaceMockRecorder {
	return m.recorder
}

// RunScan mocks base method.
func (m *MockNucleiInterface) RunScan(addresses []string, template templates.Template) ([]*output.ResultEvent, []*output.InternalWrappedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScan", addresses, template)
	ret0, _ := ret[0].([]*output.ResultEvent)
	ret1, _ := ret[1].([]*output.InternalWrappedEvent)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunScan indicates an expected call of RunScan.
func (mr *MockNucleiInterfaceMockRecorder) RunScan(addresses, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScan", reflect.TypeOf((*MockNucleiInterface)(nil).RunScan), addresses, template)
}
